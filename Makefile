APP_NAME=tic-tac-toe
SRC = $(shell find src -name "*.coffee" -type f | sort)
LIB = $(SRC:src/%.coffee=lib/%.js)

COFFEE=node_modules/.bin/coffee --js
MOCHA=node_modules/.bin/mocha --recursive --compilers coffee:coffee-script-redux/register -u tdd

# ## Usage
usage :
	@echo ''
	@echo '$(APP_NAME)'
	@echo '---------------------------'
	@echo ''
	@echo 'Core tasks           : Description'
	@echo '-------------------- : -----------'
	@echo 'make all             : Clean slate to run tests'
	@echo 'make clean           : Remove all files generated by make tasks'
	@echo 'make setup           : Install depenendencies for development'
	@echo 'make build           : Recompile coffeescript'
	@echo 'make test            : Run tests (implicitly builds)'
	@echo ''
	@echo 'Additional tasks     : Description'
	@echo '-------------------- : -----------'
	@echo 'make release         : Publish version-tag matching package.json'
	@echo ''

all: clean setup test check-checkout-clean

# Start local development server, without reloading
dev : save-sha node_modules
	./env.sh coffee --nodejs --debug-brk  src/server.coffee

save-sha:
	git rev-parse HEAD > sha.txt

node_modules:
	$(MAKE) setup

build: $(LIB)

lib:
	mkdir lib

lib/%.js: src/%.coffee lib
	dirname "$@" | xargs mkdir -p
	$(COFFEE) <"$<" >"$@"

clean :
	rm -rf lib
	#rm -rf node_modules

.PHONY : coverage

coverage :
	make clean
	./node_modules/.bin/coffeecoverage ./src ./
	${MOCHA} spec -R html-cov > coverage.html
	make clean
	make all

# This will fail if there are unstaged changes in the checkout
.PHONY : check-checkout-clean
check-checkout-clean:
	git diff --exit-code

test: build
	NODE_ENV=test ${MOCHA} spec

apps/skeletor :
	@mkdir -pv apps
	git clone git://github/InteractionTier/skeletor-node.git apps/skeletor

apps/examples :
	@mkdir -pv apps
	git clone git://github/InteractionTier/skeletor-node-examples.git apps/examples

test-against-% : apps/%
	cd $< && git fetch origin && git checkout origin/$(KELDOR_VERSION)
	cd $< && make setup
	cd $< && rm -rf node_modules/.bin/keldor* node_modules/keldor && ln -s ../../.. node_modules/keldor
	cd $< && make test

test-against-apps : test-against-skeletor test-against-examples

test-like-a-crazy-person : build test-against-apps

.PHONY: release

EDITOR ?= vim
VERSION = $(shell node -pe 'require("./package.json").version')
release-patch: NEXT_VERSION = $(shell node -pe 'require("semver").inc("$(VERSION)", "patch")')
release-minor: NEXT_VERSION = $(shell node -pe 'require("semver").inc("$(VERSION)", "minor")')
release-major: NEXT_VERSION = $(shell node -pe 'require("semver").inc("$(VERSION)", "major")')
release-patch: release
release-minor: release
release-major: release

release: all test-like-a-crazy-person
	node -e '\
		var j = require("./package.json");\
		j.version = "$(NEXT_VERSION)";\
		var s = JSON.stringify(j, null, 2);\
		require("fs").writeFileSync("./package.json", s);'
	echo "$(NEXT_VERSION)\n-----\nENTER MESSAGE\n" > .changelog.new.md
	cat CHANGELOG.md >> .changelog.new.md
	$(EDITOR) .changelog.new.md
	mv .changelog.new.md CHANGELOG.md
	git commit package.json CHANGELOG.md -m 'Version $(NEXT_VERSION)'
	git tag -a "v$(NEXT_VERSION)" -m "Version $(NEXT_VERSION)"
	git push --tags origin HEAD:master
	npm publish


# ---
# ## Dependency Management

setup :
	npm install
